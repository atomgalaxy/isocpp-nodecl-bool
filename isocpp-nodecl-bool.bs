<pre class='metadata'>
Title: Nodecl(bool) - An Independance of Declarations
Status: P
Audience: CWG
Editor: Gašper Ažman <gasper.azman@gmail.com>
Editor: Timur Doumler <papers@timur.audio>
Editor: Christopher DiBella <>
Editor: Phil Nash <isocpp@philnash.me>
Shortname: PXXXX
Abstract: how to hide your friends and define them too.
Group: WG21
Date: 2019-04-01
Markup Shorthands: markdown yes
Revision: 0
ED: https://atomgalaxy.github.io/isocpp-nodecl-bool/isocpp-nodecl-bool.html
</pre>

<style>
.ins, ins, ins *, span.ins, span.ins * {
  background-color: rgb(200, 250, 200);
  color: rgb(0, 136, 0);
  text-decoration: none;
}

.del, del, del *, span.del, span.del * {
  background-color: rgb(250, 200, 200);
  color: rgb(255, 0, 0);
  text-decoration: line-through;
  text-decoration-color: rgb(255, 0, 0);
}
</style>

Revision History {#history}
================

0. Initial version!


Status of this paper {#status}
====================

This paper defines an out-of-standard extension to C++23.


Motivation {#motivation}
==========

Hidden friends -- or inline friend definitions -- are a great way to overload operators, because it
means that they can't be found by regular name look-up rules (qualified or unqualified). For example:

```cpp
#include <iostream>

namespace example {
  struct A {
      friend std::ostream& operator<<(std::ostream& o, A const& x) noexcept;

    private:
      int x_ = 0;
  };

  // public streaming operator
  std::ostream& operator<<(std::ostream& o, A const& x) noexcept {
    return o << "A(" << x.x_ << ")";
  }

 struct B {
    // public streaming operator, but ADL-only.
    friend std::ostream& operator<<(std::ostream& o, B const& x) noexcept {
      return o << "B(" << x.x_ << ")";
    }

   private:
     int x_ = 0;
 };
} // namespace example

int main()
{
  Function pointer type for operator<<s
  using StreamA = std::ostream&(*)(std::ostream&, example::A const&);
  using StreamB = std::ostream&(*)(std::ostream&, example::B const&);
  StreamA stream_a = example::operator<<; // works
  StreamB stream_b = example::operator<<; // ERROR: lookup fails because ADL-only.
}
```

If the definition appears out-of-line, it adds a declaration to the namespace
(as evidenced by `A`), which means the operator can then be found by
non-argument dependent lookup. In the case of `operator<<`, this is
undesirable, as every class and class template defines one, and so pruning this
large overload set is very slow.

It also prevents users from using functions the library provides in
inappropriate ways. They are only supposed to be used as expressions, and their
address should not be taken.


The `std.io` module problem {#std.io}
-------------------------------------

The in-line only issue is important for layering. `operator<<` is a
customization point (an *aspect*) for interoperability with the standard
streams library. If the streams library is not in use by the program, the
dependency is unwanted; yet, forward-declaring `std::ostream` is insufficient:
the definition, not just the declaration, of the hidden friend must appear
in-line, and the definition uses ostream methods, which requires `std::ostream`
to be a complete type.

The requirement for the definition to appear in-line forces the function to
live in the same module as the class; and yet, there is a strong impetus to
ship the `operator<<` implementation in the separate `io` submodule of a
library, instead of with the main module, which is rendered impossible by the
in-line requirement.

This paper proposes a facility to split the definition from the declaration for
ADL-only functions.


Proposed Syntax {#prop}
=======================

With our proposed feature, you could do this:

```
module myLib;

namespace example {
  struct C {
    int x_;
  };
}// namespace example
```

Then, in the submodule `.io`, we can declare the streaming operator:
```
module mylib.io;
import mylib;

import std.io // for std::ostream

namespace example {
  // declared and defined in an associated namespace, but different module. No
  // forward-decl in the class, and it isn'a friend.
  std::ostream& operator<<(std::ostream& o, C const& x) noexcept nodecl {
    return o << "C(" << x.x_ << ")";
  }
} // namespace example

```

Of course, if you're not trying to solve a layering problem, but just want to
define your function out-of-line, the example for `B` could also be written as:

```
import std.io;

namespace example {
 struct B {
    // public streaming operator, but ADL-only.
    friend std::ostream& operator<<(std::ostream& o, B const& x) noexcept;

   private:
     int x_ = 0;
 };
} // namespace example

std::ostream& example::operator<<(std::ostream& o, B const& x) noexcept nodecl {
      return o << "B(" << x.x_ << ")";
}
```


Besides operators, `nodecl` could be useful for overloads of `swap`, `iter_swap`, and `iter_move`, and things like `boost::serialization`.



Proposed Wording {#wording}
===========================

In [dcl.decl], modify paragraph 5 as follows:

_parameters_and_qualifiers_:<br>
&nbsp;&nbsp;&nbsp;&nbsp;( _parameter-declaration-clause_ _<sub>opt</sub>_ ) _cv-qualifier-seq_ _<sub>opt</sub>_ _ref-qualifier_ _<sub>opt</sub>_ _noexcept-specifier_ _<sub>opt</sub>_ <ins>_nodecl-specifier_ _<sub>opt</sub>_</ins> _attribute-specifier-seq_ _<sub>opt</sub>_
<br><br>
<ins>_nodecl-specifier:_</ins><br>
 &nbsp;&nbsp;&nbsp;&nbsp;<ins><tt>nodecl </tt></ins><br>
 &nbsp;&nbsp;&nbsp;&nbsp;<ins><tt>nodecl </tt>( _constant-expression_ )</ins>
 
 Add a new paragraph below as follows:
 
 <ins>
 In a <em>nodecl-specifier</em>, the _constant-expression_, if supplied, shall be a contextually converted constant expression of type <tt>bool</tt>.
 </ins>
 

Acknowledgements {#ack}
================


<!--
 vim: ft=markdown wrap linebreak nolist textwidth=0 wrapmargin=0
-->
